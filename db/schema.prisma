// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)

  tokens   Token[]
  sessions Session[]

  avatarUrl            String?
  accessToken          String
  accessTokenExpiresAt DateTime
  refreshToken         String
  tracks               Track[]
  labels               Label[]
}

enum Role {
  USER
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Track {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  spotifyTrack   SpotifyTrack @relation(fields: [spotifyTrackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spotifyTrackId String
  dateAdded      DateTime
  trackLabels    TrackLabel[]

  @@unique([userId, spotifyTrackId])
}

model TrackLabel {
  id      Int   @id @default(autoincrement())
  track   Track @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trackId Int
  label   Label @relation(fields: [labelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  labelId Int

  @@unique([trackId, labelId])
}

model Album {
  id            String         @id
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  thumbnailUrl  String
  dateReleased  DateTime
  spotifyTracks SpotifyTrack[]
}

model Artist {
  id            String         @id
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  genres        String[]
  spotifyTracks SpotifyTrack[]
}

model SpotifyTrack {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  albumId   String
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artists   Artist[]
  explicit  Boolean
  tracks    Track[]
}

model Label {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name             String
  smartCriteria    String?
  generatePlaylist Boolean      @default(true)
  playlistId       String?      @unique
  trackLabels      TrackLabel[]

  @@unique([userId, name])
}
