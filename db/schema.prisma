// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)

  tokens   Token[]
  sessions Session[]

  spotifyId            String     @unique
  avatarUrl            String?
  accessToken          String
  accessTokenExpiresAt DateTime
  refreshToken         String
  labels               Label[]
  tracks               Track[]
  playlist             Playlist[]
}

enum Role {
  USER
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Album {
  id           String   @id
  name         String
  thumbnailUrl String
  dateReleased DateTime
  Track        Track[]
}

model Artist {
  id     String   @id
  name   String
  genres String[]
  Track  Track[]
}

model Track {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  spotifyId String   @unique
  name      String
  albumId   String
  album     Album    @relation(fields: [albumId], references: [id])
  artists   Artist[]
  dateAdded DateTime
  explicit  Boolean
  labels    Label[]
}

model Label {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  name          String
  tracks        Track[]
  smartCriteria String?
  playlist      Playlist?
}

model Playlist {
  id        Int    @id @default(autoincrement())
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
  spotifyId String @unique
  labelId   Int    @unique
  label     Label  @relation(fields: [labelId], references: [id])
}
